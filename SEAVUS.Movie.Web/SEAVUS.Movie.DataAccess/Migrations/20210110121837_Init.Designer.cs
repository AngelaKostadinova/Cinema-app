// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEAVUS.Movie.DataAccess;

namespace SEAVUS.Movie.DataAccess.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20210110121837_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "e1765d7d-b58b-43db-a6f3-ed389a68e7c8", ConcurrencyStamp = "1f44ab23-55f2-4e23-bdd6-fbe252bcc556", Name = "admin", NormalizedName = "Administrator" },
                        new { Id = "18892196-fd1d-4d06-9437-9cb4da749db6", ConcurrencyStamp = "a8f1de57-354c-4d5f-9e08-180e7151cf64", Name = "user", NormalizedName = "User" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "860f164f-6fd8-460f-9c17-396b1f4caee5", RoleId = "e1765d7d-b58b-43db-a6f3-ed389a68e7c8" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new { Id = 1, Age = 41, FirstName = "Patrick", LastName = "Wilson" },
                        new { Id = 2, Age = 30, FirstName = "Elizabeth", LastName = "Debicki" },
                        new { Id = 3, Age = 26, FirstName = "Julia", LastName = "Garner" },
                        new { Id = 4, Age = 42, FirstName = "Andy", LastName = "Samberg" },
                        new { Id = 5, Age = 35, FirstName = "Cristin", LastName = "Milioti" },
                        new { Id = 6, Age = 60, FirstName = "Hatidze", LastName = "Muratova" }
                    );
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Cast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActorId");

                    b.Property<int>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("Cast");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Director");

                    b.Property<string>("Genre");

                    b.Property<string>("Image");

                    b.Property<string>("Language");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Technology");

                    b.Property<string>("Title");

                    b.Property<string>("Trailer");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new { Id = 1, Director = "Christopher Nolan", Genre = "Action/Sci-fi", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Tenet" },
                        new { Id = 2, Director = "Max Barbakow", Genre = "Romantic comedy", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Palm Springs" },
                        new { Id = 3, Director = "Kitty Green", Genre = "Drama", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "The Assistant" },
                        new { Id = 4, Director = "Tamara Kotevska", Genre = "Documentary", Language = "Macedonian", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Honeyland" },
                        new { Id = 5, Director = "Bong Joon-ho", Genre = "Dark comedy", Language = "Korean", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Parasite" },
                        new { Id = 6, Director = "George Clooney", Genre = "Action/Sci-fi", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "The midnight sky" },
                        new { Id = 7, Director = "Patty Jenkins", Genre = "Action/Sci-fi", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Wonder Woman" },
                        new { Id = 8, Director = "Cathy Yan", Genre = "Action", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Birds of Prey" },
                        new { Id = 9, Director = "Brandon Cronenberg", Genre = "Sci-fi/Horror", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Possessor" },
                        new { Id = 10, Director = "Niki Caro", Genre = "Action", Language = "English", ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Technology = "2D", Title = "Mulan" }
                    );
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Price");

                    b.Property<DateTime>("ReservationDate");

                    b.Property<int>("SeatId");

                    b.Property<int>("ShowId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<sbyte>("Available");

                    b.Property<int>("HallId");

                    b.Property<decimal>("Price");

                    b.Property<int>("RowNumber");

                    b.Property<int>("SeatNumber");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HallId");

                    b.Property<int>("MovieId");

                    b.Property<DateTime>("ShowTime");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Price");

                    b.Property<int?>("ReservationId");

                    b.Property<int>("SeatId");

                    b.Property<int>("ShowId");

                    b.Property<int>("TicketNumber");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SeatId");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "860f164f-6fd8-460f-9c17-396b1f4caee5", AccessFailedCount = 0, ConcurrencyStamp = "4ef8f97f-fa56-4dbc-b56e-51c210cc6f46", Email = "angelaadmin@gmail.com", EmailConfirmed = true, LockoutEnabled = false, NormalizedEmail = "angelaadmin@gmail.com", NormalizedUserName = "ADMIN", PasswordHash = "AQAAAAEAACcQAAAAEFHoepSD0RvfpS6PAnQde5jI/qS/ZubwaKF04txPneIAjNoBx0SWcIyAlcdRXnYzXg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "AngelaAdmin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Cast", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.Actor", "Actor")
                        .WithMany("MovieCast")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.Movie", "Movie")
                        .WithMany("MovieCast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Reservation", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.Seat", "Seat")
                        .WithMany("Reservations")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.Show", "Show")
                        .WithMany("Reservations")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Seat", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Show", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.Hall", "Hall")
                        .WithMany("Shows")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.Movie", "Movie")
                        .WithMany("Shows")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SEAVUS.Movie.Domain.Models.Ticket", b =>
                {
                    b.HasOne("SEAVUS.Movie.Domain.Models.Reservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.Show", "Show")
                        .WithMany("Tickets")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SEAVUS.Movie.Domain.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
